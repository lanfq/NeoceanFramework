//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.17929
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

namespace Neocean.Infrastructure.Config
{
    
    
    /// <summary>
    /// The NeoceanConfigurationSection Configuration Section.
    /// </summary>
    public partial class NeoceanConfigurationSection : global::System.Configuration.ConfigurationSection
    {
        
        #region Singleton Instance
        /// <summary>
        /// The XML name of the NeoceanConfigurationSection Configuration Section.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string NeoceanConfigurationSectionSectionName = "neoceanConfigurationSection";
        
        /// <summary>
        /// Gets the NeoceanConfigurationSection instance.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public static global::Neocean.Infrastructure.Config.NeoceanConfigurationSection Instance
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.NeoceanConfigurationSection)(global::System.Configuration.ConfigurationManager.GetSection(global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.NeoceanConfigurationSectionSectionName)));
            }
        }
        #endregion
        
        #region Xmlns Property
        /// <summary>
        /// The XML name of the <see cref="Xmlns"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string XmlnsPropertyName = "xmlns";
        
        /// <summary>
        /// Gets the XML namespace of this Configuration Section.
        /// </summary>
        /// <remarks>
        /// This property makes sure that if the configuration file contains the XML namespace,
        /// the parser doesn't throw an exception because it encounters the unknown "xmlns" attribute.
        /// </remarks>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.XmlnsPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public string Xmlns
        {
            get
            {
                return ((string)(base[global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.XmlnsPropertyName]));
            }
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Memcache Property
        /// <summary>
        /// The XML name of the <see cref="Memcache"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MemcachePropertyName = "memcache";
        
        /// <summary>
        /// Gets or sets the Memcache.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Memcache.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.MemcachePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Neocean.Infrastructure.Config.MemcacheConfigurationElement Memcache
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.MemcacheConfigurationElement)(base[global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.MemcachePropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.MemcachePropertyName] = value;
            }
        }
        #endregion
        
        #region EmailClient Property
        /// <summary>
        /// The XML name of the <see cref="EmailClient"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EmailClientPropertyName = "emailClient";
        
        /// <summary>
        /// Gets or sets the EmailClient.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EmailClient.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.EmailClientPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Neocean.Infrastructure.Config.EmailClientConfigurationElement EmailClient
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.EmailClientConfigurationElement)(base[global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.EmailClientPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.NeoceanConfigurationSection.EmailClientPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Neocean.Infrastructure.Config
{
    
    
    /// <summary>
    /// The MemcacheConfigurationElement Configuration Element.
    /// </summary>
    public partial class MemcacheConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region SocketPool Property
        /// <summary>
        /// The XML name of the <see cref="SocketPool"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SocketPoolPropertyName = "socketPool";
        
        /// <summary>
        /// Gets or sets the SocketPool.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The SocketPool.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.MemcacheConfigurationElement.SocketPoolPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement SocketPool
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement)(base[global::Neocean.Infrastructure.Config.MemcacheConfigurationElement.SocketPoolPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.MemcacheConfigurationElement.SocketPoolPropertyName] = value;
            }
        }
        #endregion
        
        #region Servers Property
        /// <summary>
        /// The XML name of the <see cref="Servers"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServersPropertyName = "servers";
        
        /// <summary>
        /// Gets or sets the Servers.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Servers.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.MemcacheConfigurationElement.ServersPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::Neocean.Infrastructure.Config.ServersConfigurationElementCollection Servers
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.ServersConfigurationElementCollection)(base[global::Neocean.Infrastructure.Config.MemcacheConfigurationElement.ServersPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.MemcacheConfigurationElement.ServersPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Neocean.Infrastructure.Config
{
    
    
    /// <summary>
    /// The SocketPoolConfigurationElement Configuration Element.
    /// </summary>
    public partial class SocketPoolConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region MinPoolSize Property
        /// <summary>
        /// The XML name of the <see cref="MinPoolSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MinPoolSizePropertyName = "minPoolSize";
        
        /// <summary>
        /// Gets or sets the MinPoolSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MinPoolSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.MinPoolSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int MinPoolSize
        {
            get
            {
                return ((int)(base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.MinPoolSizePropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.MinPoolSizePropertyName] = value;
            }
        }
        #endregion
        
        #region MaxPoolSize Property
        /// <summary>
        /// The XML name of the <see cref="MaxPoolSize"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string MaxPoolSizePropertyName = "maxPoolSize";
        
        /// <summary>
        /// Gets or sets the MaxPoolSize.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The MaxPoolSize.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.MaxPoolSizePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int MaxPoolSize
        {
            get
            {
                return ((int)(base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.MaxPoolSizePropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.MaxPoolSizePropertyName] = value;
            }
        }
        #endregion
        
        #region ConnectionTimeout Property
        /// <summary>
        /// The XML name of the <see cref="ConnectionTimeout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ConnectionTimeoutPropertyName = "connectionTimeout";
        
        /// <summary>
        /// Gets or sets the ConnectionTimeout.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The ConnectionTimeout.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.ConnectionTimeoutPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::System.TimeSpan ConnectionTimeout
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.ConnectionTimeoutPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.ConnectionTimeoutPropertyName] = value;
            }
        }
        #endregion
        
        #region DeadTimeout Property
        /// <summary>
        /// The XML name of the <see cref="DeadTimeout"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string DeadTimeoutPropertyName = "deadTimeout";
        
        /// <summary>
        /// Gets or sets the DeadTimeout.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The DeadTimeout.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.DeadTimeoutPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual global::System.TimeSpan DeadTimeout
        {
            get
            {
                return ((global::System.TimeSpan)(base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.DeadTimeoutPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.SocketPoolConfigurationElement.DeadTimeoutPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Neocean.Infrastructure.Config
{
    
    
    /// <summary>
    /// The ServerAddConfigurationElement Configuration Element.
    /// </summary>
    public partial class ServerAddConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Address Property
        /// <summary>
        /// The XML name of the <see cref="Address"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string AddressPropertyName = "address";
        
        /// <summary>
        /// Gets or sets the Address.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Address.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.ServerAddConfigurationElement.AddressPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Address
        {
            get
            {
                return ((string)(base[global::Neocean.Infrastructure.Config.ServerAddConfigurationElement.AddressPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.ServerAddConfigurationElement.AddressPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.ServerAddConfigurationElement.PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual long Port
        {
            get
            {
                return ((long)(base[global::Neocean.Infrastructure.Config.ServerAddConfigurationElement.PortPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.ServerAddConfigurationElement.PortPropertyName] = value;
            }
        }
        #endregion
    }
}
namespace Neocean.Infrastructure.Config
{
    
    
    /// <summary>
    /// A collection of ServerAddConfigurationElement instances.
    /// </summary>
    [global::System.Configuration.ConfigurationCollectionAttribute(typeof(global::Neocean.Infrastructure.Config.ServerAddConfigurationElement), CollectionType=global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate, AddItemName=global::Neocean.Infrastructure.Config.ServersConfigurationElementCollection.ServerAddConfigurationElementPropertyName)]
    public partial class ServersConfigurationElementCollection : global::System.Configuration.ConfigurationElementCollection
    {
        
        #region Constants
        /// <summary>
        /// The XML name of the individual <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> instances in this collection.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string ServerAddConfigurationElementPropertyName = "serverAddConfigurationElement";
        #endregion
        
        #region Overrides
        /// <summary>
        /// Gets the type of the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <returns>The <see cref="global::System.Configuration.ConfigurationElementCollectionType"/> of this collection.</returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override global::System.Configuration.ConfigurationElementCollectionType CollectionType
        {
            get
            {
                return global::System.Configuration.ConfigurationElementCollectionType.BasicMapAlternate;
            }
        }
        
        /// <summary>
        /// Gets the name used to identify this collection of elements
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override string ElementName
        {
            get
            {
                return global::Neocean.Infrastructure.Config.ServersConfigurationElementCollection.ServerAddConfigurationElementPropertyName;
            }
        }
        
        /// <summary>
        /// Indicates whether the specified <see cref="global::System.Configuration.ConfigurationElement"/> exists in the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="elementName">The name of the element to verify.</param>
        /// <returns>
        /// <see langword="true"/> if the element exists in the collection; otherwise, <see langword="false"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override bool IsElementName(string elementName)
        {
            return (elementName == global::Neocean.Infrastructure.Config.ServersConfigurationElementCollection.ServerAddConfigurationElementPropertyName);
        }
        
        /// <summary>
        /// Gets the element key for the specified configuration element.
        /// </summary>
        /// <param name="element">The <see cref="global::System.Configuration.ConfigurationElement"/> to return the key for.</param>
        /// <returns>
        /// An <see cref="object"/> that acts as the key for the specified <see cref="global::System.Configuration.ConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override object GetElementKey(global::System.Configuration.ConfigurationElement element)
        {
            return ((global::Neocean.Infrastructure.Config.ServerAddConfigurationElement)(element)).Address;
        }
        
        /// <summary>
        /// Creates a new <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/>.
        /// </summary>
        /// <returns>
        /// A new <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/>.
        /// </returns>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        protected override global::System.Configuration.ConfigurationElement CreateNewElement()
        {
            return new global::Neocean.Infrastructure.Config.ServerAddConfigurationElement();
        }
        #endregion
        
        #region Indexer
        /// <summary>
        /// Gets the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Neocean.Infrastructure.Config.ServerAddConfigurationElement this[int index]
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.ServerAddConfigurationElement)(base.BaseGet(index)));
            }
        }
        
        /// <summary>
        /// Gets the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Neocean.Infrastructure.Config.ServerAddConfigurationElement this[object address]
        {
            get
            {
                return ((global::Neocean.Infrastructure.Config.ServerAddConfigurationElement)(base.BaseGet(address)));
            }
        }
        #endregion
        
        #region Add
        /// <summary>
        /// Adds the specified <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serverAddConfigurationElement">The <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to add.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Add(global::Neocean.Infrastructure.Config.ServerAddConfigurationElement serverAddConfigurationElement)
        {
            base.BaseAdd(serverAddConfigurationElement);
        }
        #endregion
        
        #region Remove
        /// <summary>
        /// Removes the specified <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> from the <see cref="global::System.Configuration.ConfigurationElementCollection"/>.
        /// </summary>
        /// <param name="serverAddConfigurationElement">The <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to remove.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public void Remove(global::Neocean.Infrastructure.Config.ServerAddConfigurationElement serverAddConfigurationElement)
        {
            base.BaseRemove(this.GetElementKey(serverAddConfigurationElement));
        }
        #endregion
        
        #region GetItem
        /// <summary>
        /// Gets the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> at the specified index.
        /// </summary>
        /// <param name="index">The index of the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Neocean.Infrastructure.Config.ServerAddConfigurationElement GetItemAt(int index)
        {
            return ((global::Neocean.Infrastructure.Config.ServerAddConfigurationElement)(base.BaseGet(index)));
        }
        
        /// <summary>
        /// Gets the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> with the specified key.
        /// </summary>
        /// <param name="address">The key of the <see cref="global::Neocean.Infrastructure.Config.ServerAddConfigurationElement"/> to retrieve.</param>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public global::Neocean.Infrastructure.Config.ServerAddConfigurationElement GetItemByKey(string address)
        {
            return ((global::Neocean.Infrastructure.Config.ServerAddConfigurationElement)(base.BaseGet(((object)(address)))));
        }
        #endregion
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
    }
}
namespace Neocean.Infrastructure.Config
{
    
    
    /// <summary>
    /// The EmailClientConfigurationElement Configuration Element.
    /// </summary>
    public partial class EmailClientConfigurationElement : global::System.Configuration.ConfigurationElement
    {
        
        #region IsReadOnly override
        /// <summary>
        /// Gets a value indicating whether the element is read-only.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        public override bool IsReadOnly()
        {
            return false;
        }
        #endregion
        
        #region Host Property
        /// <summary>
        /// The XML name of the <see cref="Host"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string HostPropertyName = "host";
        
        /// <summary>
        /// Gets or sets the Host.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Host.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.HostPropertyName, IsRequired=true, IsKey=true, IsDefaultCollection=false)]
        public virtual string Host
        {
            get
            {
                return ((string)(base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.HostPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.HostPropertyName] = value;
            }
        }
        #endregion
        
        #region Port Property
        /// <summary>
        /// The XML name of the <see cref="Port"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PortPropertyName = "port";
        
        /// <summary>
        /// Gets or sets the Port.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Port.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.PortPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual int Port
        {
            get
            {
                return ((int)(base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.PortPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.PortPropertyName] = value;
            }
        }
        #endregion
        
        #region UserName Property
        /// <summary>
        /// The XML name of the <see cref="UserName"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string UserNamePropertyName = "userName";
        
        /// <summary>
        /// Gets or sets the UserName.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The UserName.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.UserNamePropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string UserName
        {
            get
            {
                return ((string)(base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.UserNamePropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.UserNamePropertyName] = value;
            }
        }
        #endregion
        
        #region Password Property
        /// <summary>
        /// The XML name of the <see cref="Password"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string PasswordPropertyName = "password";
        
        /// <summary>
        /// Gets or sets the Password.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Password.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.PasswordPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Password
        {
            get
            {
                return ((string)(base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.PasswordPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.PasswordPropertyName] = value;
            }
        }
        #endregion
        
        #region EnableSsl Property
        /// <summary>
        /// The XML name of the <see cref="EnableSsl"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string EnableSslPropertyName = "enableSsl";
        
        /// <summary>
        /// Gets or sets the EnableSsl.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The EnableSsl.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.EnableSslPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual bool EnableSsl
        {
            get
            {
                return ((bool)(base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.EnableSslPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.EnableSslPropertyName] = value;
            }
        }
        #endregion
        
        #region Sender Property
        /// <summary>
        /// The XML name of the <see cref="Sender"/> property.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        internal const string SenderPropertyName = "sender";
        
        /// <summary>
        /// Gets or sets the Sender.
        /// </summary>
        [global::System.CodeDom.Compiler.GeneratedCodeAttribute("ConfigurationSectionDesigner.CsdFileGenerator", "2.0.1.0")]
        [global::System.ComponentModel.DescriptionAttribute("The Sender.")]
        [global::System.Configuration.ConfigurationPropertyAttribute(global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.SenderPropertyName, IsRequired=false, IsKey=false, IsDefaultCollection=false)]
        public virtual string Sender
        {
            get
            {
                return ((string)(base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.SenderPropertyName]));
            }
            set
            {
                base[global::Neocean.Infrastructure.Config.EmailClientConfigurationElement.SenderPropertyName] = value;
            }
        }
        #endregion
    }
}
